###一般模式
0 或功能键[Home] 	这是数字『 0 』：移动到这一行的最前面字符处 (常用)
$ 或功能键[End] 	移动到这一行的最后面字符处(常用)
H 	光标移动到这个屏幕的最上方那一行的第一个字符
M 	光标移动到这个屏幕的中央那一行的第一个字符
L 	光标移动到这个屏幕的最下方那一行的第一个字符
G 	移动到这个档案的最后一行(常用)
x, X 	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)
nx 	n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』
dd 	删除游标所在的那一整行(常用)
ndd 	n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)
d1G 	删除光标所在到第一行的所有数据
dG 	删除光标所在到最后一行的所有数据
d$ 	删除游标所在处，到该行的最后一个字符
d0 	那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符
yy 	复制游标所在的那一行(常用)
nyy 	n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)
y1G 	复制游标所在行到第一行的所有数据
yG 	复制游标所在行到最后一行的所有数据
y0 	复制光标所在的那个字符到该行行首的所有数据
y$ 	复制光标所在的那个字符到该行行尾的所有数据
p, P 	p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)
J 	将光标所在行与下一行的数据结合成同一行
c 	重复删除多个数据，例如向下删除 10 行，[ 10cj ]
u 	复原前一个动作。(常用)
[Ctrl]+r 	重做上一个动作。(常用)
这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！

nG 	n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)
gg 	移动到这个档案的第一行，相当于 1G 啊！ (常用)
n<Enter> 	n 为数字。光标向下移动 n 行(常用)
< 或 >   左右缩进

/word 	向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)
?word 	向光标之上寻找一个字符串名称为 word 的字符串。
n 	这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！
N 	这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。

###底线命令模式
:n1,n2s/word1/word2/g 	n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：
『:100,200s/vbird/VBIRD/g』。(常用)
:1,$s/word1/word2/g 	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)
:w [filename] 	将编辑的数据储存成另一个档案（类似另存新档）
:r [filename] 	在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面
:n1,n2 w [filename] 	将 n1 到 n2 的内容储存成 filename 这个档案。
:f file            将当前文件重命名为 file
:/str/                  正向搜索，将光标移到下一个包含字符串 str 的行
:?str?                  反向搜索，将光标移到上一个包含字符串 str 的行
:/str/w file            正向搜索，并将第一个包含字符串 str 的行写入 file 文件
:/str1/,/str2/w file    正向搜索，并将包含字符串 str1 的行至包含字符串 str2 的行写
:/^struct/  正向搜索行的开始包含 struct 
:/$struct/ 正向搜索行末尾包含 struct
:d                              删除光标所在行
:3d                             删除 3 行
:.,$d                           删除当前行至正文的末尾
:/str1/,/str2/d                 删除从字符串 str1 到 str2 的所有行

####第二部份：一般模式切换到编辑模式的可用的按钮说明
i, I 	进入插入模式(Insert mode)：
i 为『从目前光标所在处插入』， I 为『在目前所在行的第一个非空格符处开始插入』。 (常用)

a, A 	进入插入模式(Insert mode)：
a 为『从目前光标所在的下一个字符处开始插入』， A 为『从光标所在行的最后一个字符处开始插入』。(常用)

o, O 	进入插入模式(Insert mode)：
这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处插入新的一行』； O 为在目前光标所在处的上一行插入新的一行！(常用)

r, R 	进入取代模式(Replace mode)：
r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)

#### Shell切换
:!shell_command   执行完 shell_command 后回到Vim

#### 分屏与标签页
:split（可用缩写 :sp）            上下分屏；
:vsplit（可用缩写 :vsp）          左右分屏。

vimdiff a.txt b.txt
即键盘上的h,j,k,l 四个Vim专用方向键，配合Ctrl键和w键（window的缩写），就能跳转到目标分屏

:tabnew filename

###################
###################正则表达式元字符
表1.常用的元字符 代码 	说明
. 	匹配除换行符以外的任意字符
\w 	匹配字母或数字或下划线或汉字
\s 	匹配任意的空白符
\d 	匹配数字
\b 	匹配单词的开始或结束
^ 	匹配字符串的开始
$ 	匹配字符串的结束

